const char* ocl_src_stars = 
" \n"
"\n"
"\n"
"unsigned long long indx(unsigned long long i, unsigned long long j)\n"
"{\n"
"	return (j * (j - 1) / 2 + i);\n"
"}\n"
"\n"
"\n"
"kernel void propagate(global float4* pos, global float4* vel, global float* acc_matr)\n"
"{\n"
"	const float step = 0.01f;\n"
"	const float mass = 0.1f;\n"
"\n"
"	unsigned long long i = get_global_id(0);\n"
"\n"
"	pos[i] = pos[i] + (float4)(step * vel[i].xyz, 0.0f);\n"
"\n"
"	if (length(pos[i].xyz) > 1.0f)\n"
"	{\n"
"		float3 pos_norm = normalize(pos[i].xyz);\n"
"		pos[i] = (float4)(2.0f * pos_norm - pos[i].xyz, 1.0f);\n"
"		vel[i] = (float4)(vel[i].xyz - dot(pos_norm, vel[i].xyz) * pos_norm, 0.0f);\n"
"	}\n"
"\n"
"	barrier(CLK_GLOBAL_MEM_FENCE);\n"
"\n"
"	for (unsigned long long j = i + 1; j < get_global_size(0); j++)\n"
"	{\n"
"		float r = distance(pos[i], pos[j]);\n"
"\n"
"		if (100 * r * r > mass)\n"
"		{\n"
"			acc_matr[indx(i, j)] = mass / r / r / r;\n"
"		}\n"
"		else\n"
"		{\n"
"			acc_matr[indx(i, j)] = 0.0f;\n"
"		}\n"
"	}\n"
"\n"
"	barrier(CLK_GLOBAL_MEM_FENCE);\n"
"\n"
"	float4 acc = (float4)(0.0f, 0.0f, 0.0f, 0.0f);\n"
"	for (unsigned long long j = 0; j < i; j++)\n"
"	{\n"
"		acc += acc_matr[indx(j, i)] * (pos[i] - pos[j]);\n"
"	}\n"
"	for (unsigned long long j = i + 1; j < get_global_size(0); j++)\n"
"	{\n"
"		acc += acc_matr[indx(i, j)] * (pos[i] - pos[j]);\n"
"	}\n"
"\n"
"	vel[i] = vel[i] + step * acc;\n"
"\n"
"	if (length(vel[i]) > 1.0f)\n"
"		vel[i] = normalize(vel[i]);\n"
"}\n"
"\0";
